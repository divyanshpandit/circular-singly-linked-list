# -*- coding: utf-8 -*-
"""cll_single.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N4fx7BSP4i_1OnxVW-PFFJzuGXDdrdXJ
"""

class Node:
    def __init__(self, item=None, next=None):
        self.item = item
        self.next = next

class clls:
    def __init__(self, last=None):
        self.last = last

    def insert_at_first(self, data):
        n = Node(data)
        if self.last is None:
            n.next = n
            self.last = n
        else:
            n.next = self.last.next
            self.last.next = n

    def insert_at_last(self, data):
        n = Node(item=data)
        if self.last is None:
            n.next = n
            self.last = n
        else:
            n.next = self.last.next
            self.last.next = n
            self.last = n

    def insert_after(self, tempd, data):
        n = Node(data)
        if self.last is None:
            return
        if self.last.next == self.last:
            if self.last.item == tempd:
                n.next = self.last
                self.last.next = n
                self.last = n
        temp = self.last.next
        while temp != self.last:
            if temp.item == tempd:
                n.next = temp.next
                temp.next = n
                return
            temp = temp.next
        if temp == self.last:
            if temp.item == tempd:
                self.insert_at_last(data)

    def delete_first(self):
        if self.last is None:
            return
        if self.last.next == self.last:
            self.last = None
        else:
            self.last.next = self.last.next.next

    def delete_last(self):
        if self.last is None:
            return
        if self.last.next == self.last:
            self.last = None
        else:
            temp = self.last.next
            while temp.next != self.last:
                temp = temp.next
            temp.next = self.last.next
            self.last = temp

    def delete_item(self, data):
        if self.last is None:
            return
        if self.last.next == self.last:
            if self.last.item == data:
                self.last = None
            return
        if self.last.next.item == data:
            self.delete_first()
            return
        else:
            temp = self.last.next
            while temp.next != self.last:
                if temp.next.item == data:
                    temp.next = temp.next.next
                    return
                temp = temp.next
            if temp.next == self.last and self.last.item == data:
                self.delete_last()

    def __iter__(self):
        return csll(self.last.next if self.last else None)

    def print_list(self):
        if self.last is None:
            print("List is empty")
            return
        else:
            temp = self.last.next
            while True:
                print(temp.item, end=" <> ")
                if temp.next == self.last.next:
                    break
                temp = temp.next
            print()

class csll:
    def __init__(self, start):
        self.current = start  # Start node for iteration
        self.start = start    # Reference to the start node
        self.first_touch = True  # Flag to check if it's the first iteration

    def __iter__(self):
        return self

    def __next__(self):
        # If the list is empty, raise StopIteration
        if self.current is None:
            raise StopIteration

        # If we have completed one cycle, raise StopIteration
        if not self.first_touch and self.current == self.start:
            raise StopIteration

        # Get the current node's data
        data = self.current.item

        # Move to the next node
        self.current = self.current.next

        # Indicate that we have touched the first node
        self.first_touch = False

        return data

# Example usage
q = clls()
q.insert_at_first(20)
q.insert_at_first(30)
q.insert_at_last(40)
q.insert_after(30, 50)
q.delete_item(30)

# Use iterator to print items in the circular list
for item in q:
    print(item, end=" ")  # Outputs: 20 50 40
print()

# Print the list using print_list method
q.print_list()  # Outputs: 20 <> 50 <> 40 <>